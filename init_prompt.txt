🤖 AI 챗봇 프로젝트 완전 재현 프롬프트

📋 프로젝트 개요
Spring Boot 3.2.0 기반의 다중 AI 서비스 통합 챗봇 애플리케이션을 개발해주세요. 이 프로젝트는 Google Gemini, OpenAI, Claude API를 통합하여 사용자가 선택적으로 AI 서비스를 이용할 수 있는 웹 애플리케이션입니다.

🏗️ 기술 스택 및 아키텍처
- 언어: Java 21
- 프레임워크: Spring Boot 3.2.0
- 빌드 도구: Gradle
- 데이터베이스: PostgreSQL 15 + Redis 7 (캐싱)
- 보안: JWT 인증/인가 + BCrypt 암호화
- 배포: Docker Compose (멀티 컨테이너)
- API 문서: Swagger/OpenAPI 3
- 아키텍처 패턴: MVC + Factory Pattern + DDD (Domain Driven Design)

📦 패키지 구조 (매우 중요!)
src/main/java/com/kafibara/chatbot/
├── ChatbotApplication.java (메인 클래스)
├── user/ (사용자 도메인 - 8개 파일)
│   ├── controller/
│   │   ├── AuthController.java (회원가입/로그인)
│   │   └── UserController.java (사용자 관리)
│   ├── service/
│   │   └── UserService.java
│   ├── entity/
│   │   └── User.java (JPA 엔티티)
│   ├── repository/
│   │   └── UserRepository.java
│   └── dto/
│       ├── AuthResponse.java
│       ├── LoginRequest.java
│       ├── SignupRequest.java
│       └── UserResponse.java
├── chat/ (채팅 도메인 - 17개 파일)
│   ├── controller/
│   │   ├── ChatController.java (채팅 API)
│   │   └── AIServiceController.java (AI 서비스 정보)
│   ├── service/
│   │   └── ChatService.java
│   ├── entity/
│   │   ├── Chat.java (채팅 메시지)
│   │   └── Thread.java (채팅 스레드)
│   ├── repository/
│   │   ├── ChatRepository.java
│   │   └── ThreadRepository.java
│   ├── dto/
│   │   ├── ChatRequest.java
│   │   ├── ChatResponse.java
│   │   └── AIServiceInfo.java
│   └── ai/ (AI 서비스 통합)
│       ├── AIService.java (인터페이스)
│       ├── AIServiceFactory.java (팩토리 패턴)
│       ├── ChatMessage.java (AI 메시지 DTO)
│       └── impl/
│           ├── GeminiService.java (Google Gemini)
│           ├── OpenAIService.java (ChatGPT)
│           ├── ClaudeService.java (Anthropic Claude)
│           └── MockAIService.java (테스트용)
├── feedback/ (피드백 도메인 - 10개 파일)
│   ├── controller/
│   │   └── FeedbackController.java
│   ├── service/
│   │   └── FeedbackService.java
│   ├── entity/
│   │   └── Feedback.java
│   ├── repository/
│   │   └── FeedbackRepository.java
│   └── dto/
│       ├── FeedbackRequest.java
│       ├── FeedbackResponse.java
│       ├── FeedbackStatusUpdateRequest.java
│       └── FeedbackAnalyticsResponse.java
└── config/ (설정 및 공통 - 14개 파일)
    ├── CacheConfig.java (Redis 캐시)
    ├── DataInitializer.java (초기 데이터)
    ├── MetricsConfig.java (모니터링)
    ├── OpenApiConfig.java (Swagger)
    ├── SecurityConfig.java (Spring Security)
    ├── WebConfig.java (CORS 등)
    ├── admin/ (관리자 기능)
    │   ├── AdminController.java
    │   ├── AnalyticsService.java
    │   ├── ReportService.java
    │   ├── HealthController.java
    │   ├── ActivityReportResponse.java
    │   └── ReportResponse.java
    ├── exception/
    │   └── GlobalExceptionHandler.java
    └── util/
        ├── JwtAuthenticationFilter.java
        └── JwtUtil.java

🗄️ 데이터베이스 스키마
-- users 테이블
CREATE TABLE users (
    id BIGSERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    name VARCHAR(100) NOT NULL,
    role VARCHAR(20) DEFAULT 'USER',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- threads 테이블 (채팅 스레드)
CREATE TABLE threads (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT REFERENCES users(id),
    title VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- chats 테이블 (채팅 메시지)
CREATE TABLE chats (
    id BIGSERIAL PRIMARY KEY,
    thread_id BIGINT REFERENCES threads(id),
    question TEXT NOT NULL,
    answer TEXT NOT NULL,
    ai_service VARCHAR(50) NOT NULL,
    follow_up_question TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- feedbacks 테이블
CREATE TABLE feedbacks (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT REFERENCES users(id),
    chat_id BIGINT REFERENCES chats(id),
    is_positive BOOLEAN NOT NULL,
    comment TEXT,
    status VARCHAR(20) DEFAULT 'PENDING',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

🔧 주요 설정 파일들

build.gradle
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.kafibara'
version = '0.0.1-SNAPSHOT'
java.sourceCompatibility = JavaVersion.VERSION_21

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    
    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'
    
    // Database
    runtimeOnly 'org.postgresql:postgresql'
    
    // Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    
    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

application.yml (프로파일별 설정)
# application.yml (기본)
spring:
  profiles:
    active: demo
  application:
    name: custom-chatbot
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  cache:
    type: redis
  data:
    redis:
      host: localhost
      port: 6379

logging:
  level:
    com.kafibara.chatbot: DEBUG

# AI Service API Keys (환경변수로 관리)
ai:
  gemini:
    api-key: ${GEMINI_API_KEY:}
    base-url: https://generativelanguage.googleapis.com
  openai:
    api-key: ${OPENAI_API_KEY:}
    base-url: https://api.openai.com
  claude:
    api-key: ${CLAUDE_API_KEY:}
    base-url: https://api.anthropic.com

jwt:
  secret: ${JWT_SECRET:your-secret-key-here-make-it-long-and-secure}
  expiration: 86400000 # 24시간

docker-compose.yml
version: '3.8'
services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: chatbot
      POSTGRES_USER: chatbot
      POSTGRES_PASSWORD: chatbot123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"

  app:
    build: .
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/chatbot
      SPRING_DATASOURCE_USERNAME: chatbot
      SPRING_DATASOURCE_PASSWORD: chatbot123
      SPRING_DATA_REDIS_HOST: redis
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CLAUDE_API_KEY: ${CLAUDE_API_KEY}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:

🔑 핵심 기능 구현 요구사항

1. 사용자 인증 시스템
- JWT 기반 인증/인가
- 회원가입/로그인 API
- BCrypt 패스워드 암호화
- Role 기반 권한 관리 (USER, ADMIN)

2. AI 서비스 통합
- Factory Pattern으로 AI 서비스 선택
- Google Gemini, OpenAI, Claude API 통합
- 스트리밍 응답 지원 (Server-Sent Events)
- Mock 서비스 (테스트용)

3. 채팅 시스템
- 스레드 기반 대화 관리
- 대화 히스토리 저장
- 후속 질문 자동 생성
- 페이지네이션 지원

4. 피드백 시스템
- 긍정/부정 피드백
- 상태 관리 (PENDING, RESOLVED)
- 분석 및 통계 기능

5. 관리자 기능
- 사용자 관리
- 시스템 분석 및 보고서
- 피드백 관리
- 헬스체크

🔒 보안 요구사항
- JWT 토큰 기반 인증
- API 키는 환경변수로 관리
- CORS 설정
- SQL Injection 방지
- XSS 방지

📊 모니터링 및 로깅
- Spring Boot Actuator
- Redis 캐싱
- 상세한 로깅 설정
- 헬스체크 엔드포인트

🐳 배포 환경
- Docker 멀티 스테이지 빌드
- PostgreSQL + Redis + App 컨테이너
- 환경별 프로파일 (demo, docker, test)
- 헬스체크 및 의존성 관리

📝 API 문서화
- Swagger/OpenAPI 3 통합
- 모든 엔드포인트 문서화
- DTO 스키마 정의
- 인증 요구사항 명시

🧪 테스트 요구사항
- 단위 테스트 (JUnit 5)
- 통합 테스트
- Security 테스트
- Mock 서비스 테스트

📁 추가 파일들
- .env.example (환경변수 템플릿)
- init-db.sql (데이터베이스 초기화)
- Dockerfile (멀티 스테이지 빌드)
- README.md (한국어 문서)
- .gitignore (Java/Spring Boot 표준)

🎯 중요한 구현 포인트
1. 패키지 구조를 정확히 지켜주세요 - DDD 패턴 적용
2. 모든 import 문이 새로운 패키지 구조에 맞게 설정되어야 합니다
3. AI 서비스는 Factory Pattern으로 구현
4. JWT 인증은 필터 체인에 정확히 설정
5. Docker 환경에서 정상 작동해야 합니다
6. Redis 캐싱이 적용되어야 합니다
7. 모든 API는 Swagger로 문서화
8. 한국어 주석 및 문서 작성

이 프롬프트를 사용하면 다른 세션에서도 동일한 프로젝트를 완전히 재현할 수 있습니다. 특히 패키지 구조와 의존성 관계가 매우 중요하므로 정확히 따라주세요.
