version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: chatbot-postgres
    environment:
      POSTGRES_DB: chatbot_db
      POSTGRES_USER: chatbot_user
      POSTGRES_PASSWORD: chatbot_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatbot_user -d chatbot_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # AI 챗봇 애플리케이션
  chatbot-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chatbot-app
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - GEMINI_API_KEY=${GEMINI_API_KEY:-KjKjKjKjKjKjKjKjKjKjKjKjKjKj}
      - JWT_SECRET=${JWT_SECRET:-mySecretKeyForJWTTokenGenerationThatShouldBeLongEnoughForSecurity}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Redis (선택사항 - 캐싱용)
  redis:
    image: redis:7-alpine
    container_name: chatbot-redis
    ports:
      - "6379:6379"
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  chatbot-network:
    driver: bridge
